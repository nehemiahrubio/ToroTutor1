{"ast":null,"code":"import axios from\"axios\";import setAuthToken from\"../../utils/setAuthToken\";import jwt_decode from\"jwt-decode\";import{GET_ERRORS,CLEAR_ERRORS,SET_CURRENT_USER}from\"./types\";// Register User\nexport const registerUser=userData=>dispatch=>{axios.post(\"/api/users/register\",userData).then(res=>{if(res.status===200){dispatch({type:CLEAR_ERRORS});}}).catch(err=>dispatch({type:GET_ERRORS,payload:err.response.data}));};// Login - Get User JWT\nexport const loginUser=userData=>dispatch=>{axios.post(\"/api/users/login\",userData).then(res=>{// save to localStorage\nconst{token}=res.data;// set token to localStorage\nlocalStorage.setItem(\"jwtToken\",token);// set token to auth header\nsetAuthToken(token);// decode token to get user data\nconst decoded=jwt_decode(token);// set current user\ndispatch(setCurrentUser(decoded));}).catch(err=>dispatch({type:GET_ERRORS,payload:err.response.data}));};// Set logged in user\nexport const clearErrors=()=>{return{type:CLEAR_ERRORS};};// Set logged in user\nexport const setCurrentUser=decoded=>{return{type:SET_CURRENT_USER,payload:decoded};};// Set admin property\nexport const setAdmin=adminProps=>dispatch=>{axios.post(\"/api/users/admin\",{adminProps:adminProps}).catch(err=>console.log(err));};// Log out user\nexport const logoutUser=()=>dispatch=>{// Remove token from localStorage\nlocalStorage.removeItem(\"jwtToken\");// Set auth header for future requests\nsetAuthToken(false);// Set current user to {} which will set isAuthenticated to false\ndispatch(setCurrentUser({}));};","map":{"version":3,"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","CLEAR_ERRORS","SET_CURRENT_USER","registerUser","userData","dispatch","post","then","res","status","type","catch","err","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","clearErrors","setAdmin","adminProps","console","log","logoutUser","removeItem"],"sources":["C:/Users/jackie/OneDrive/文档/GitHub/TutorUP-App/client/src/redux/actions/authActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { GET_ERRORS, CLEAR_ERRORS, SET_CURRENT_USER } from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch({\r\n          type: CLEAR_ERRORS,\r\n        });\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Login - Get User JWT\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then((res) => {\r\n      // save to localStorage\r\n      const { token } = res.data;\r\n      // set token to localStorage\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // set token to auth header\r\n      setAuthToken(token);\r\n      // decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS,\r\n  };\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n\r\n// Set admin property\r\nexport const setAdmin = (adminProps) => (dispatch) => {\r\n  axios\r\n    .post(\"/api/users/admin\", { adminProps: adminProps })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n// Log out user\r\nexport const logoutUser = () => (dispatch) => {\r\n  // Remove token from localStorage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Set auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,YAAY,KAAM,0BAA0B,CACnD,MAAO,CAAAC,UAAU,KAAM,YAAY,CACnC,OAASC,UAAU,CAAEC,YAAY,CAAEC,gBAAgB,KAAQ,SAAS,CAEpE;AACA,MAAO,MAAM,CAAAC,YAAY,CAAIC,QAAQ,EAAMC,QAAQ,EAAK,CACtDR,KAAK,CACFS,IAAI,CAAC,qBAAqB,CAAEF,QAAQ,CAAC,CACrCG,IAAI,CAAEC,GAAG,EAAK,CACb,GAAIA,GAAG,CAACC,MAAM,GAAK,GAAG,CAAE,CACtBJ,QAAQ,CAAC,CACPK,IAAI,CAAET,YACR,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CACDU,KAAK,CAAEC,GAAG,EACTP,QAAQ,CAAC,CACPK,IAAI,CAAEV,UAAU,CAChBa,OAAO,CAAED,GAAG,CAACE,QAAQ,CAACC,IACxB,CAAC,CACH,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,SAAS,CAAIZ,QAAQ,EAAMC,QAAQ,EAAK,CACnDR,KAAK,CACFS,IAAI,CAAC,kBAAkB,CAAEF,QAAQ,CAAC,CAClCG,IAAI,CAAEC,GAAG,EAAK,CACb;AACA,KAAM,CAAES,KAAM,CAAC,CAAGT,GAAG,CAACO,IAAI,CAC1B;AACAG,YAAY,CAACC,OAAO,CAAC,UAAU,CAAEF,KAAK,CAAC,CACvC;AACAnB,YAAY,CAACmB,KAAK,CAAC,CACnB;AACA,KAAM,CAAAG,OAAO,CAAGrB,UAAU,CAACkB,KAAK,CAAC,CACjC;AACAZ,QAAQ,CAACgB,cAAc,CAACD,OAAO,CAAC,CAAC,CACnC,CAAC,CAAC,CACDT,KAAK,CAAEC,GAAG,EACTP,QAAQ,CAAC,CACPK,IAAI,CAAEV,UAAU,CAChBa,OAAO,CAAED,GAAG,CAACE,QAAQ,CAACC,IACxB,CAAC,CACH,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,WAAW,CAAGA,CAAA,GAAM,CAC/B,MAAO,CACLZ,IAAI,CAAET,YACR,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAoB,cAAc,CAAID,OAAO,EAAK,CACzC,MAAO,CACLV,IAAI,CAAER,gBAAgB,CACtBW,OAAO,CAAEO,OACX,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,QAAQ,CAAIC,UAAU,EAAMnB,QAAQ,EAAK,CACpDR,KAAK,CACFS,IAAI,CAAC,kBAAkB,CAAE,CAAEkB,UAAU,CAAEA,UAAW,CAAC,CAAC,CACpDb,KAAK,CAAEC,GAAG,EAAKa,OAAO,CAACC,GAAG,CAACd,GAAG,CAAC,CAAC,CACrC,CAAC,CAED;AACA,MAAO,MAAM,CAAAe,UAAU,CAAGA,CAAA,GAAOtB,QAAQ,EAAK,CAC5C;AACAa,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC,CACnC;AACA9B,YAAY,CAAC,KAAK,CAAC,CACnB;AACAO,QAAQ,CAACgB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}