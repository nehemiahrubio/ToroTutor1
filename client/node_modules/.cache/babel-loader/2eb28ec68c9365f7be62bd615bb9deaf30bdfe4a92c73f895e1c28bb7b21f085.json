{"ast":null,"code":"import axios from \"axios\";\nimport { GET_SUBJECTS, SUBJECTS_LOADING, GET_ERRORS } from \"./types\";\nexport const createSubjects = (subjectData, history) => dispatch => {\n  console.log('Creating subjects:', subjectData);\n  return axios.post(\"/api/subjects\", subjectData).then(res => {\n    console.log('Subjects created successfully:', res.data);\n    history.push(\"/subjects\");\n  }).catch(err => {\n    console.error('Error creating subjects:', err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\n\n// Get all subjects\nexport const getSubjects = () => dispatch => {\n  dispatch(setSubjectsLoading());\n  axios.get(\"/api/subjects\").then(res => {\n    dispatch({\n      type: GET_SUBJECTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: null\n    });\n  });\n};\n\n// Delete a subject by ID\nexport const removeSubject = (subjectId, history) => dispatch => {\n  return new Promise((resolve, reject) => {\n    axios.delete(\"/api/subjects\", {\n      data: {\n        id: subjectId\n      }\n    }).then(res => {\n      // Dispatch an action to update the state after successful deletion\n      dispatch({\n        type: GET_SUBJECTS,\n        payload: res.data // Assuming the response contains the updated subjects\n      });\n      // Optionally, you can dispatch other actions or perform additional logic here\n      resolve(res.data); // Resolve the promise with the response data\n    }).catch(err => {\n      console.log(err);\n      reject(err); // Reject the promise with the error\n    });\n  });\n};\n\n// Subjects loading\nexport const setSubjectsLoading = () => {\n  return {\n    type: SUBJECTS_LOADING\n  };\n};","map":{"version":3,"names":["axios","GET_SUBJECTS","SUBJECTS_LOADING","GET_ERRORS","createSubjects","subjectData","history","dispatch","console","log","post","then","res","data","push","catch","err","error","type","payload","response","getSubjects","setSubjectsLoading","get","removeSubject","subjectId","Promise","resolve","reject","delete","id"],"sources":["C:/Users/jackie/OneDrive/文档/GitHub/ToroTutor1/client/src/redux/actions/subjectActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { GET_SUBJECTS, SUBJECTS_LOADING, GET_ERRORS } from \"./types\";\r\n\r\nexport const createSubjects = (subjectData, history) => (dispatch) => {\r\n  console.log('Creating subjects:', subjectData);\r\n\r\n  return axios\r\n    .post(\"/api/subjects\", subjectData)\r\n    .then((res) => {\r\n      console.log('Subjects created successfully:', res.data);\r\n      history.push(\"/subjects\");\r\n    })\r\n    .catch((err) => {\r\n      console.error('Error creating subjects:', err);\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      });\r\n    });\r\n};\r\n\r\n\r\n// Get all subjects\r\nexport const getSubjects = () => (dispatch) => {\r\n  dispatch(setSubjectsLoading());\r\n  axios\r\n    .get(\"/api/subjects\")\r\n    .then((res) => {\r\n      dispatch({\r\n        type: GET_SUBJECTS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: null,\r\n      });\r\n    });\r\n};\r\n\r\n// Delete a subject by ID\r\nexport const removeSubject = (subjectId, history) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    axios\r\n      .delete(\"/api/subjects\", { data: { id: subjectId } })\r\n      .then((res) => {\r\n        // Dispatch an action to update the state after successful deletion\r\n        dispatch({\r\n          type: GET_SUBJECTS,\r\n          payload: res.data, // Assuming the response contains the updated subjects\r\n        });\r\n        // Optionally, you can dispatch other actions or perform additional logic here\r\n        resolve(res.data); // Resolve the promise with the response data\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        reject(err); // Reject the promise with the error\r\n      });\r\n  });\r\n};\r\n\r\n\r\n// Subjects loading\r\nexport const setSubjectsLoading = () => {\r\n  return {\r\n    type: SUBJECTS_LOADING,\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,SAAS;AAEpE,OAAO,MAAMC,cAAc,GAAGA,CAACC,WAAW,EAAEC,OAAO,KAAMC,QAAQ,IAAK;EACpEC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,WAAW,CAAC;EAE9C,OAAOL,KAAK,CACTU,IAAI,CAAC,eAAe,EAAEL,WAAW,CAAC,CAClCM,IAAI,CAAEC,GAAG,IAAK;IACbJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEG,GAAG,CAACC,IAAI,CAAC;IACvDP,OAAO,CAACQ,IAAI,CAAC,WAAW,CAAC;EAC3B,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;IACdR,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;IAC9CT,QAAQ,CAAC;MACPW,IAAI,EAAEf,UAAU;MAChBgB,OAAO,EAAEH,GAAG,CAACI,QAAQ,CAACP;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC;AACN,CAAC;;AAGD;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAAA,KAAOd,QAAQ,IAAK;EAC7CA,QAAQ,CAACe,kBAAkB,CAAC,CAAC,CAAC;EAC9BtB,KAAK,CACFuB,GAAG,CAAC,eAAe,CAAC,CACpBZ,IAAI,CAAEC,GAAG,IAAK;IACbL,QAAQ,CAAC;MACPW,IAAI,EAAEjB,YAAY;MAClBkB,OAAO,EAAEP,GAAG,CAACC;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK;IACdT,QAAQ,CAAC;MACPW,IAAI,EAAEf,UAAU;MAChBgB,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMK,aAAa,GAAGA,CAACC,SAAS,EAAEnB,OAAO,KAAMC,QAAQ,IAAK;EACjE,OAAO,IAAImB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC5B,KAAK,CACF6B,MAAM,CAAC,eAAe,EAAE;MAAEhB,IAAI,EAAE;QAAEiB,EAAE,EAAEL;MAAU;IAAE,CAAC,CAAC,CACpDd,IAAI,CAAEC,GAAG,IAAK;MACb;MACAL,QAAQ,CAAC;QACPW,IAAI,EAAEjB,YAAY;QAClBkB,OAAO,EAAEP,GAAG,CAACC,IAAI,CAAE;MACrB,CAAC,CAAC;MACF;MACAc,OAAO,CAACf,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK;MACdR,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC;MAChBY,MAAM,CAACZ,GAAG,CAAC,CAAC,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMM,kBAAkB,GAAGA,CAAA,KAAM;EACtC,OAAO;IACLJ,IAAI,EAAEhB;EACR,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}