'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _logfmt = require('logfmt');

var _logfmt2 = _interopRequireDefault(_logfmt);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _is = require('is');

var _is2 = _interopRequireDefault(_is);

var _flattenObj = require('flatten-obj');

var _flattenObj2 = _interopRequireDefault(_flattenObj);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Environment variables.
 *
 * @type {String}
 */

var _process$env = process.env,
    LOG_LEVEL = _process$env.LOG_LEVEL,
    NODE_ENV = _process$env.NODE_ENV;

/**
 * Logfmt helper.
 *
 * @type {Logfmt}
 */

var logfmt = new _logfmt2.default();

/**
 * Flattening helper.
 *
 * @type {Flattener}
 */

var flatten = (0, _flattenObj2.default)({ separator: '#' });

/**
 * Log levels.
 *
 * @type {Object}
 */

var LEVELS = {
  trace: 0,
  debug: 1,
  info: 2,
  warn: 3,
  error: 4,
  fatal: 5
};

/**
 * Log level colors.
 *
 * @type {Object}
 */

var COLORS = {
  trace: _chalk2.default.gray,
  debug: _chalk2.default.green,
  info: _chalk2.default.blue,
  warn: _chalk2.default.yellow,
  error: _chalk2.default.red,
  fatal: _chalk2.default.bgRed.white
};

/**
 * Define the `Logger` class.
 *
 * @type {Logger}
 */

var Logger =

/**
 * Constructor.
 *
 * @type {Object} options
 */

function Logger() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, Logger);

  _initialiseProps.call(this);

  var color = options.color,
      level = options.level,
      readable = options.readable;


  if (typeof level != 'string') {
    level = 'info';
  }

  level = level.toLowerCase();

  if (!(level in LEVELS)) {
    level = 'info';
  }

  this.config = {
    level: level,
    color: !!color,
    readable: !!readable,
    threshold: LEVELS[level]
  };

  var _loop = function _loop(key) {
    _this[key] = function (message, data) {
      return _this.log(key, message, data);
    };
  };

  for (var key in LEVELS) {
    _loop(key);
  }
}

/**
 * Log to the console with `level`, `message` and `data`.
 *
 * @param {String} level
 * @param {String} message
 * @param {Object} data
 */

/**
 * Format a log with `level`, `message` and `data`.
 *
 * @param {String} level
 * @param {String} message
 * @param {Object} data
 */

;

/**
 * Create a logger singleton with sane defaults.
 *
 * @type {Logger}
 */

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.log = function (level, message) {
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    level = level.toLowerCase();

    if (!(level in LEVELS)) {
      return _this2.log('info', message, data);
    }

    if (!_is2.default.string(message)) {
      message = message.toString();
    }

    if (!_is2.default.object(data)) {
      data = {};
    }

    var threshold = _this2.config.threshold;

    var value = LEVELS[level];
    if (value < threshold) return;

    var output = _this2.format(level, message, data);
    console.log(output); // eslint-disable-line no-console
  };

  this.format = function (level, message, data) {
    var _config = _this2.config,
        color = _config.color,
        readable = _config.readable;

    var value = LEVELS[level];
    var flat = flatten(data);
    var ctx = _extends({}, flat, { level: level, message: message });
    var string = logfmt.stringify(ctx);

    if (readable && color) {
      var tag = '' + COLORS[level]('[' + level + ']');
      var msg = value > 3 ? _chalk2.default.red(message) : message;
      var obj = '' + _chalk2.default.gray(string);
      return tag + ' ' + msg + ' ' + obj;
    } else if (readable) {
      return '[' + level + '] ' + message + ' ' + string;
    } else {
      return string;
    }
  };
};

var logger = new Logger({
  level: LOG_LEVEL || 'info',
  readable: NODE_ENV != 'production',
  color: NODE_ENV != 'production'
});

/**
 * Export.
 *
 * @type {Logger}
 */

exports.default = logger;
exports.Logger = Logger;